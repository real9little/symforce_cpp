// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Reprojects the landmark into the target camera and returns the delta from the correspondence to
 * the reprojection.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof pixel reprojection error
 *     valid: is valid projection or not
 */
template <typename Scalar>
void DoubleSphereReprojectionDelta(const sym::Pose3<Scalar>& source_pose,
                                   const Eigen::Matrix<Scalar, 6, 1>& source_calibration_storage,
                                   const sym::Pose3<Scalar>& target_pose,
                                   const Eigen::Matrix<Scalar, 6, 1>& target_calibration_storage,
                                   const Scalar source_inverse_range,
                                   const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
                                   const Eigen::Matrix<Scalar, 2, 1>& target_pixel,
                                   const Scalar epsilon,
                                   Eigen::Matrix<Scalar, 2, 1>* const reprojection_delta = nullptr,
                                   Scalar* const is_valid = nullptr) {
  // Total ops: 245

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (64)
  const Scalar _tmp0 =
      std::min<Scalar>(0, (((target_calibration_storage(5, 0) + Scalar(-0.5)) > 0) -
                           ((target_calibration_storage(5, 0) + Scalar(-0.5)) < 0)));
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = -epsilon * (_tmp1 + 1) + target_calibration_storage(5, 0);
  const Scalar _tmp3 = -_tmp2;
  const Scalar _tmp4 = 2 * _target_pose[2];
  const Scalar _tmp5 = _target_pose[1] * _tmp4;
  const Scalar _tmp6 = 2 * _target_pose[3];
  const Scalar _tmp7 = _target_pose[0] * _tmp6;
  const Scalar _tmp8 = 2 * _source_pose[0];
  const Scalar _tmp9 = _source_pose[3] * _tmp8;
  const Scalar _tmp10 = 2 * _source_pose[2];
  const Scalar _tmp11 = _source_pose[1] * _tmp10;
  const Scalar _tmp12 = -source_calibration_storage(3, 0) + source_pixel(1, 0);
  const Scalar _tmp13 =
      std::pow(_tmp12, Scalar(2)) / std::pow(source_calibration_storage(1, 0), Scalar(2));
  const Scalar _tmp14 = -source_calibration_storage(2, 0) + source_pixel(0, 0);
  const Scalar _tmp15 =
      std::pow(_tmp14, Scalar(2)) / std::pow(source_calibration_storage(0, 0), Scalar(2));
  const Scalar _tmp16 = _tmp13 + _tmp15;
  const Scalar _tmp17 = -_tmp16 * std::pow(source_calibration_storage(5, 0), Scalar(2)) + 1;
  const Scalar _tmp18 = -_tmp16 * (2 * source_calibration_storage(5, 0) - 1) + 1;
  const Scalar _tmp19 =
      source_calibration_storage(5, 0) * std::sqrt(Scalar(std::max<Scalar>(_tmp18, epsilon))) -
      source_calibration_storage(5, 0) + 1;
  const Scalar _tmp20 =
      _tmp19 + epsilon * (2 * std::min<Scalar>(0, (((_tmp19) > 0) - ((_tmp19) < 0))) + 1);
  const Scalar _tmp21 = _tmp17 / _tmp20;
  const Scalar _tmp22 = std::pow(_tmp17, Scalar(2)) / std::pow(_tmp20, Scalar(2));
  const Scalar _tmp23 = _tmp16 + _tmp22;
  const Scalar _tmp24 =
      _tmp23 + epsilon * (2 * std::min<Scalar>(0, (((_tmp23) > 0) - ((_tmp23) < 0))) + 1);
  const Scalar _tmp25 =
      _tmp16 * (1 - std::pow(source_calibration_storage(4, 0), Scalar(2))) + _tmp22;
  const Scalar _tmp26 = _tmp21 * source_calibration_storage(4, 0) +
                        std::sqrt(Scalar(std::max<Scalar>(_tmp25, epsilon)));
  const Scalar _tmp27 = _tmp26 / _tmp24;
  const Scalar _tmp28 = _tmp21 * _tmp27 - source_calibration_storage(4, 0);
  const Scalar _tmp29 = std::pow(_tmp26, Scalar(2)) / std::pow(_tmp24, Scalar(2));
  const Scalar _tmp30 =
      std::pow(Scalar(_tmp13 * _tmp29 + _tmp15 * _tmp29 + std::pow(_tmp28, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp31 = _tmp28 * _tmp30;
  const Scalar _tmp32 = _source_pose[1] * _tmp8;
  const Scalar _tmp33 = _source_pose[3] * _tmp10;
  const Scalar _tmp34 = _tmp27 * _tmp30;
  const Scalar _tmp35 = _tmp14 * _tmp34 / source_calibration_storage(0, 0);
  const Scalar _tmp36 = -2 * std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp37 = -2 * std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp38 = _tmp12 * _tmp34 / source_calibration_storage(1, 0);
  const Scalar _tmp39 = _tmp31 * (_tmp11 - _tmp9) + _tmp35 * (_tmp32 + _tmp33) +
                        _tmp38 * (_tmp36 + _tmp37 + 1) +
                        source_inverse_range * (_source_pose[5] - _target_pose[5]);
  const Scalar _tmp40 = -2 * std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp41 = 1 - 2 * std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp42 = _source_pose[0] * _tmp10;
  const Scalar _tmp43 = 2 * _source_pose[1] * _source_pose[3];
  const Scalar _tmp44 = 1 - 2 * std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp45 = _tmp31 * (_tmp37 + _tmp44) + _tmp35 * (_tmp42 - _tmp43) +
                        _tmp38 * (_tmp11 + _tmp9) +
                        source_inverse_range * (_source_pose[6] - _target_pose[6]);
  const Scalar _tmp46 = _target_pose[0] * _tmp4;
  const Scalar _tmp47 = _target_pose[1] * _tmp6;
  const Scalar _tmp48 = _tmp31 * (_tmp42 + _tmp43) + _tmp35 * (_tmp36 + _tmp44) +
                        _tmp38 * (_tmp32 - _tmp33) +
                        source_inverse_range * (_source_pose[4] - _target_pose[4]);
  const Scalar _tmp49 =
      _tmp39 * (_tmp5 - _tmp7) + _tmp45 * (_tmp40 + _tmp41) + _tmp48 * (_tmp46 + _tmp47);
  const Scalar _tmp50 = _target_pose[2] * _tmp6;
  const Scalar _tmp51 = 2 * _target_pose[0] * _target_pose[1];
  const Scalar _tmp52 = -2 * std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp53 =
      _tmp39 * (_tmp50 + _tmp51) + _tmp45 * (_tmp46 - _tmp47) + _tmp48 * (_tmp40 + _tmp52 + 1);
  const Scalar _tmp54 =
      _tmp39 * (_tmp41 + _tmp52) + _tmp45 * (_tmp5 + _tmp7) + _tmp48 * (-_tmp50 + _tmp51);
  const Scalar _tmp55 =
      std::pow(_tmp53, Scalar(2)) + std::pow(_tmp54, Scalar(2)) + std::pow(epsilon, Scalar(2));
  const Scalar _tmp56 = std::sqrt(Scalar(std::pow(_tmp49, Scalar(2)) + _tmp55));
  const Scalar _tmp57 = _tmp49 + _tmp56 * target_calibration_storage(4, 0);
  const Scalar _tmp58 =
      Scalar(1.0) /
      (std::max<Scalar>(epsilon,
                        std::fabs(_tmp2 * std::sqrt(Scalar(_tmp55 + std::pow(_tmp57, Scalar(2)))) +
                                  _tmp57 * (_tmp3 + 1))));
  const Scalar _tmp59 = std::pow(target_calibration_storage(4, 0), Scalar(2));
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp1 + _tmp3 + 1;
  const Scalar _tmp61 = _tmp0 + _tmp2;
  const Scalar _tmp62 = std::pow(_tmp60, Scalar(2)) / std::pow(_tmp61, Scalar(2));
  const Scalar _tmp63 = _tmp59 * _tmp62 - _tmp59 + 1;

  // Output terms (2)
  if (reprojection_delta != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _reprojection_delta = (*reprojection_delta);

    _reprojection_delta(0, 0) = _tmp53 * _tmp58 * target_calibration_storage(0, 0) +
                                target_calibration_storage(2, 0) - target_pixel(0, 0);
    _reprojection_delta(1, 0) = _tmp54 * _tmp58 * target_calibration_storage(1, 0) +
                                target_calibration_storage(3, 0) - target_pixel(1, 0);
  }

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid =
        std::max<Scalar>(
            0,
            std::min<Scalar>(
                std::max<Scalar>(
                    -(((target_calibration_storage(4, 0) - 1) > 0) -
                      ((target_calibration_storage(4, 0) - 1) < 0)),
                    1 - std::max<Scalar>(
                            0, -(((_tmp49 * target_calibration_storage(4, 0) + _tmp56) > 0) -
                                 ((_tmp49 * target_calibration_storage(4, 0) + _tmp56) < 0)))),
                std::max<Scalar>(
                    -(((_tmp63) > 0) - ((_tmp63) < 0)),
                    1 - std::max<Scalar>(
                            0, -(((_tmp49 - _tmp56 * (-_tmp60 *
                                                          std::sqrt(Scalar(std::max<Scalar>(
                                                              _tmp63, std::sqrt(epsilon)))) /
                                                          _tmp61 +
                                                      _tmp62 * target_calibration_storage(4, 0) -
                                                      target_calibration_storage(4, 0))) > 0) -
                                 ((_tmp49 - _tmp56 * (-_tmp60 *
                                                          std::sqrt(Scalar(std::max<Scalar>(
                                                              _tmp63, std::sqrt(epsilon)))) /
                                                          _tmp61 +
                                                      _tmp62 * target_calibration_storage(4, 0) -
                                                      target_calibration_storage(4, 0))) < 0)))))) *
        std::min<Scalar>(1 - std::max<Scalar>(0, -(((_tmp18) > 0) - ((_tmp18) < 0))),
                         1 - std::max<Scalar>(0, -(((_tmp25) > 0) - ((_tmp25) < 0))));
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
