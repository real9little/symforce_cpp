// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark ray into the target spherical camera and
 * comparing it against the correspondence.
 *
 * The landmark is specified as a camera point in the source camera with an inverse range; this
 * means the landmark is fixed in the source camera and always has residual 0 there (this 0 residual
 * is not returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target spherical camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     p_camera_source: The location of the landmark in the source camera coordinate, will be
 * normalized target_pixel: The location of the correspondence in the target camera weight: The
 * weight of the factor gnc_mu: The mu convexity parameter for the Barron noise model gnc_scale: The
 * scale parameter for the Barron noise model epsilon: Small positive value
 *     target_camera_model_class: The subclass of CameraCal to use as the target camera model
 *
 * Outputs:
 *     res: 2dof whiten residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkPolynomialReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose, const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 8, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 3, 1>& p_camera_source,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1128

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (302)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp3 = -2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3 + 1;
  const Scalar _tmp5 = 2 * _source_pose[1];
  const Scalar _tmp6 = _source_pose[0] * _tmp5;
  const Scalar _tmp7 = 2 * _source_pose[3];
  const Scalar _tmp8 = _source_pose[2] * _tmp7;
  const Scalar _tmp9 = -_tmp8;
  const Scalar _tmp10 = _tmp6 + _tmp9;
  const Scalar _tmp11 = std::pow(Scalar(epsilon + std::pow(p_camera_source(0, 0), Scalar(2)) +
                                        std::pow(p_camera_source(1, 0), Scalar(2)) +
                                        std::pow(p_camera_source(2, 0), Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp12 = _tmp11 * p_camera_source(1, 0);
  const Scalar _tmp13 = 2 * _source_pose[0] * _source_pose[2];
  const Scalar _tmp14 = _source_pose[3] * _tmp5;
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = _tmp11 * p_camera_source(2, 0);
  const Scalar _tmp17 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp18 = -2 * _tmp17;
  const Scalar _tmp19 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp20 = 1 - 2 * _tmp19;
  const Scalar _tmp21 = _tmp11 * p_camera_source(0, 0);
  const Scalar _tmp22 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp23 = _tmp10 * _tmp12 + _tmp15 * _tmp16 + _tmp21 * (_tmp18 + _tmp20) +
                        _tmp22 * source_inverse_range;
  const Scalar _tmp24 = 2 * _target_pose[2];
  const Scalar _tmp25 = _target_pose[0] * _tmp24;
  const Scalar _tmp26 = 2 * _target_pose[1];
  const Scalar _tmp27 = _target_pose[3] * _tmp26;
  const Scalar _tmp28 = -_tmp27;
  const Scalar _tmp29 = _tmp25 + _tmp28;
  const Scalar _tmp30 = _source_pose[0] * _tmp7;
  const Scalar _tmp31 = _source_pose[2] * _tmp5;
  const Scalar _tmp32 = _tmp30 + _tmp31;
  const Scalar _tmp33 = -_tmp14;
  const Scalar _tmp34 = _tmp13 + _tmp33;
  const Scalar _tmp35 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp36 = -2 * _tmp35;
  const Scalar _tmp37 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp38 = _tmp12 * _tmp32 + _tmp16 * (_tmp18 + _tmp36 + 1) + _tmp21 * _tmp34 +
                        _tmp37 * source_inverse_range;
  const Scalar _tmp39 = _target_pose[3] * _tmp24;
  const Scalar _tmp40 = _target_pose[0] * _tmp26;
  const Scalar _tmp41 = _tmp39 + _tmp40;
  const Scalar _tmp42 = _tmp11 * (_tmp6 + _tmp8);
  const Scalar _tmp43 = -_tmp30;
  const Scalar _tmp44 = _tmp31 + _tmp43;
  const Scalar _tmp45 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp46 = _tmp12 * (_tmp20 + _tmp36) + _tmp16 * _tmp44 +
                        _tmp42 * p_camera_source(0, 0) + _tmp45 * source_inverse_range;
  const Scalar _tmp47 = _tmp29 * _tmp38 + _tmp41 * _tmp46;
  const Scalar _tmp48 = _tmp23 * _tmp4 + _tmp47;
  const Scalar _tmp49 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp50 = 1 - 2 * _tmp49;
  const Scalar _tmp51 = _tmp1 + _tmp50;
  const Scalar _tmp52 = _target_pose[2] * _tmp26;
  const Scalar _tmp53 = 2 * _target_pose[0] * _target_pose[3];
  const Scalar _tmp54 = -_tmp53;
  const Scalar _tmp55 = _tmp52 + _tmp54;
  const Scalar _tmp56 = _tmp25 + _tmp27;
  const Scalar _tmp57 = _tmp23 * _tmp56 + _tmp46 * _tmp55;
  const Scalar _tmp58 = _tmp38 * _tmp51 + _tmp57;
  const Scalar _tmp59 = std::fabs(_tmp58);
  const Scalar _tmp60 = std::max<Scalar>(_tmp59, epsilon);
  const Scalar _tmp61 = std::pow(_tmp60, Scalar(-2));
  const Scalar _tmp62 = _tmp3 + _tmp50;
  const Scalar _tmp63 = _tmp52 + _tmp53;
  const Scalar _tmp64 = -_tmp39;
  const Scalar _tmp65 = _tmp40 + _tmp64;
  const Scalar _tmp66 = _tmp23 * _tmp65 + _tmp38 * _tmp63;
  const Scalar _tmp67 = _tmp46 * _tmp62 + _tmp66;
  const Scalar _tmp68 = std::pow(_tmp67, Scalar(2));
  const Scalar _tmp69 = std::pow(_tmp48, Scalar(2));
  const Scalar _tmp70 = _tmp61 * _tmp68 + _tmp61 * _tmp69 + epsilon;
  const Scalar _tmp71 = std::pow(_tmp70, Scalar(2));
  const Scalar _tmp72 = Scalar(1.0) * target_calibration_storage(5, 0);
  const Scalar _tmp73 = Scalar(1.0) *
                            [&]() {
                              const Scalar base = _tmp70;
                              return base * base * base;
                            }() *
                            target_calibration_storage(7, 0) +
                        _tmp70 * _tmp72 + Scalar(1.0) * _tmp71 * target_calibration_storage(6, 0) +
                        Scalar(1.0);
  const Scalar _tmp74 = Scalar(1.0) / (_tmp60);
  const Scalar _tmp75 = _tmp74 * target_calibration_storage(0, 0);
  const Scalar _tmp76 = _tmp73 * _tmp75;
  const Scalar _tmp77 = _tmp48 * _tmp76 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp78 = _tmp74 * target_calibration_storage(1, 0);
  const Scalar _tmp79 = _tmp67 * _tmp78;
  const Scalar _tmp80 = _tmp73 * _tmp79 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp81 = std::pow(_tmp77, Scalar(2)) + std::pow(_tmp80, Scalar(2)) + epsilon;
  const Scalar _tmp82 = std::pow(_tmp81, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp83 = std::sqrt(weight);
  const Scalar _tmp84 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp85 = epsilon + std::fabs(_tmp84);
  const Scalar _tmp86 = 2 - _tmp84;
  const Scalar _tmp87 =
      _tmp86 + epsilon * (2 * std::min<Scalar>(0, (((_tmp86) > 0) - ((_tmp86) < 0))) + 1);
  const Scalar _tmp88 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp89 = _tmp81 * _tmp88 / _tmp85 + 1;
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp87;
  const Scalar _tmp91 =
      std::sqrt(Scalar(2)) * std::sqrt(Scalar(_tmp85 * (std::pow(_tmp89, _tmp90) - 1) / _tmp87));
  const Scalar _tmp92 = (((_tmp58) > 0) - ((_tmp58) < 0));
  const Scalar _tmp93 = std::max<Scalar>(
      0, std::min<Scalar>(_tmp92, (((-std::sqrt(_tmp70) + target_calibration_storage(4, 0)) > 0) -
                                   ((-std::sqrt(_tmp70) + target_calibration_storage(4, 0)) < 0))));
  const Scalar _tmp94 = _tmp83 * _tmp91 * _tmp93;
  const Scalar _tmp95 = _tmp82 * _tmp94;
  const Scalar _tmp96 = _tmp77 * _tmp95;
  const Scalar _tmp97 = _tmp80 * _tmp95;
  const Scalar _tmp98 = (Scalar(1) / Scalar(2)) * _tmp77;
  const Scalar _tmp99 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp100 = -_tmp99;
  const Scalar _tmp101 = -_tmp17;
  const Scalar _tmp102 = _tmp12 * _tmp44 + _tmp16 * (_tmp100 + _tmp101 + _tmp19 + _tmp35);
  const Scalar _tmp103 = -_tmp31;
  const Scalar _tmp104 = -_tmp35;
  const Scalar _tmp105 = _tmp104 + _tmp19;
  const Scalar _tmp106 = _tmp101 + _tmp99;
  const Scalar _tmp107 = _tmp12 * (_tmp105 + _tmp106) + _tmp16 * (_tmp103 + _tmp43);
  const Scalar _tmp108 = -_tmp6;
  const Scalar _tmp109 = _tmp12 * _tmp15 + _tmp16 * (_tmp108 + _tmp8);
  const Scalar _tmp110 = _tmp102 * _tmp62 + _tmp107 * _tmp63 + _tmp109 * _tmp65;
  const Scalar _tmp111 = _tmp73 * _tmp78;
  const Scalar _tmp112 = _tmp102 * _tmp55 + _tmp107 * _tmp51 + _tmp109 * _tmp56;
  const Scalar _tmp113 = _tmp92 * ((((_tmp59 - epsilon) > 0) - ((_tmp59 - epsilon) < 0)) + 1);
  const Scalar _tmp114 = (Scalar(1) / Scalar(2)) * _tmp113 * _tmp61 * _tmp73;
  const Scalar _tmp115 = _tmp67 * target_calibration_storage(1, 0);
  const Scalar _tmp116 = _tmp114 * _tmp115;
  const Scalar _tmp117 = _tmp102 * _tmp41 + _tmp107 * _tmp29 + _tmp109 * _tmp4;
  const Scalar _tmp118 = 2 * _tmp61;
  const Scalar _tmp119 = _tmp118 * _tmp48;
  const Scalar _tmp120 = _tmp113 / [&]() {
    const Scalar base = _tmp60;
    return base * base * base;
  }();
  const Scalar _tmp121 = _tmp120 * _tmp69;
  const Scalar _tmp122 = _tmp120 * _tmp68;
  const Scalar _tmp123 = _tmp118 * _tmp67;
  const Scalar _tmp124 =
      _tmp110 * _tmp123 - _tmp112 * _tmp121 - _tmp112 * _tmp122 + _tmp117 * _tmp119;
  const Scalar _tmp125 = Scalar(3.0) * _tmp71 * target_calibration_storage(7, 0);
  const Scalar _tmp126 = Scalar(2.0) * _tmp70 * target_calibration_storage(6, 0);
  const Scalar _tmp127 = _tmp124 * _tmp125 + _tmp124 * _tmp126 + _tmp124 * _tmp72;
  const Scalar _tmp128 = _tmp110 * _tmp111 - _tmp112 * _tmp116 + _tmp127 * _tmp79;
  const Scalar _tmp129 = 2 * _tmp80;
  const Scalar _tmp130 = _tmp48 * target_calibration_storage(0, 0);
  const Scalar _tmp131 = _tmp114 * _tmp130;
  const Scalar _tmp132 = _tmp48 * _tmp75;
  const Scalar _tmp133 = -_tmp112 * _tmp131 + _tmp117 * _tmp76 + _tmp127 * _tmp132;
  const Scalar _tmp134 = 2 * _tmp77;
  const Scalar _tmp135 = _tmp128 * _tmp129 + _tmp133 * _tmp134;
  const Scalar _tmp136 = _tmp94 / (_tmp81 * std::sqrt(_tmp81));
  const Scalar _tmp137 = _tmp135 * _tmp136;
  const Scalar _tmp138 =
      _tmp82 * _tmp83 * _tmp88 * std::pow(_tmp89, Scalar(_tmp90 - 1)) * _tmp93 / _tmp91;
  const Scalar _tmp139 = _tmp138 * _tmp98;
  const Scalar _tmp140 = _tmp133 * _tmp95 + _tmp135 * _tmp139 - _tmp137 * _tmp98;
  const Scalar _tmp141 = (Scalar(1) / Scalar(2)) * _tmp80;
  const Scalar _tmp142 = _tmp138 * _tmp141;
  const Scalar _tmp143 = _tmp128 * _tmp95 + _tmp135 * _tmp142 - _tmp137 * _tmp141;
  const Scalar _tmp144 = -_tmp13;
  const Scalar _tmp145 = -_tmp19;
  const Scalar _tmp146 = _tmp145 + _tmp35;
  const Scalar _tmp147 = _tmp16 * (_tmp106 + _tmp146) + _tmp21 * (_tmp144 + _tmp33);
  const Scalar _tmp148 = _tmp100 + _tmp17;
  const Scalar _tmp149 = _tmp16 * _tmp34 + _tmp21 * (_tmp146 + _tmp148);
  const Scalar _tmp150 = _tmp21 * (_tmp103 + _tmp30) + _tmp42 * p_camera_source(2, 0);
  const Scalar _tmp151 = _tmp147 * _tmp4 + _tmp149 * _tmp29 + _tmp150 * _tmp41;
  const Scalar _tmp152 = _tmp147 * _tmp56 + _tmp149 * _tmp51 + _tmp150 * _tmp55;
  const Scalar _tmp153 = _tmp147 * _tmp65 + _tmp149 * _tmp63 + _tmp150 * _tmp62;
  const Scalar _tmp154 =
      _tmp119 * _tmp151 - _tmp121 * _tmp152 - _tmp122 * _tmp152 + _tmp123 * _tmp153;
  const Scalar _tmp155 = _tmp125 * _tmp154 + _tmp126 * _tmp154 + _tmp154 * _tmp72;
  const Scalar _tmp156 = -_tmp131 * _tmp152 + _tmp132 * _tmp155 + _tmp151 * _tmp76;
  const Scalar _tmp157 = _tmp111 * _tmp153 - _tmp116 * _tmp152 + _tmp155 * _tmp79;
  const Scalar _tmp158 = _tmp129 * _tmp157 + _tmp134 * _tmp156;
  const Scalar _tmp159 = _tmp136 * _tmp98;
  const Scalar _tmp160 = _tmp139 * _tmp158 + _tmp156 * _tmp95 - _tmp158 * _tmp159;
  const Scalar _tmp161 = _tmp136 * _tmp141;
  const Scalar _tmp162 = _tmp142 * _tmp158 + _tmp157 * _tmp95 - _tmp158 * _tmp161;
  const Scalar _tmp163 = _tmp12 * (_tmp14 + _tmp144) + _tmp21 * _tmp32;
  const Scalar _tmp164 = _tmp10 * _tmp21 + _tmp12 * (_tmp105 + _tmp148);
  const Scalar _tmp165 =
      _tmp12 * (_tmp108 + _tmp9) + _tmp21 * (_tmp104 + _tmp145 + _tmp17 + _tmp99);
  const Scalar _tmp166 = _tmp163 * _tmp51 + _tmp164 * _tmp56 + _tmp165 * _tmp55;
  const Scalar _tmp167 = _tmp163 * _tmp63 + _tmp164 * _tmp65 + _tmp165 * _tmp62;
  const Scalar _tmp168 = _tmp163 * _tmp29 + _tmp164 * _tmp4 + _tmp165 * _tmp41;
  const Scalar _tmp169 =
      _tmp119 * _tmp168 - _tmp121 * _tmp166 - _tmp122 * _tmp166 + _tmp123 * _tmp167;
  const Scalar _tmp170 = _tmp125 * _tmp169 + _tmp126 * _tmp169 + _tmp169 * _tmp72;
  const Scalar _tmp171 = _tmp111 * _tmp167 - _tmp116 * _tmp166 + _tmp170 * _tmp79;
  const Scalar _tmp172 = -_tmp131 * _tmp166 + _tmp132 * _tmp170 + _tmp168 * _tmp76;
  const Scalar _tmp173 = _tmp129 * _tmp171 + _tmp134 * _tmp172;
  const Scalar _tmp174 = _tmp139 * _tmp173 - _tmp159 * _tmp173 + _tmp172 * _tmp95;
  const Scalar _tmp175 = _tmp142 * _tmp173 - _tmp161 * _tmp173 + _tmp171 * _tmp95;
  const Scalar _tmp176 = _tmp76 * source_inverse_range;
  const Scalar _tmp177 = _tmp176 * _tmp4;
  const Scalar _tmp178 = _tmp131 * source_inverse_range;
  const Scalar _tmp179 = _tmp178 * _tmp56;
  const Scalar _tmp180 = _tmp121 * source_inverse_range;
  const Scalar _tmp181 = _tmp180 * _tmp56;
  const Scalar _tmp182 = _tmp119 * source_inverse_range;
  const Scalar _tmp183 = _tmp182 * _tmp4;
  const Scalar _tmp184 = _tmp65 * source_inverse_range;
  const Scalar _tmp185 = _tmp123 * _tmp184;
  const Scalar _tmp186 = _tmp122 * source_inverse_range;
  const Scalar _tmp187 = _tmp186 * _tmp56;
  const Scalar _tmp188 = -_tmp181 + _tmp183 + _tmp185 - _tmp187;
  const Scalar _tmp189 = _tmp125 * _tmp188 + _tmp126 * _tmp188 + _tmp188 * _tmp72;
  const Scalar _tmp190 = _tmp132 * _tmp189 + _tmp177 - _tmp179;
  const Scalar _tmp191 = _tmp111 * _tmp184;
  const Scalar _tmp192 = _tmp116 * source_inverse_range;
  const Scalar _tmp193 = _tmp192 * _tmp56;
  const Scalar _tmp194 = _tmp189 * _tmp79 + _tmp191 - _tmp193;
  const Scalar _tmp195 = _tmp129 * _tmp194 + _tmp134 * _tmp190;
  const Scalar _tmp196 = _tmp139 * _tmp195 - _tmp159 * _tmp195 + _tmp190 * _tmp95;
  const Scalar _tmp197 = _tmp142 * _tmp195 - _tmp161 * _tmp195 + _tmp194 * _tmp95;
  const Scalar _tmp198 = _tmp192 * _tmp55;
  const Scalar _tmp199 = _tmp62 * source_inverse_range;
  const Scalar _tmp200 = _tmp123 * _tmp199;
  const Scalar _tmp201 = _tmp180 * _tmp55;
  const Scalar _tmp202 = _tmp182 * _tmp41;
  const Scalar _tmp203 = _tmp186 * _tmp55;
  const Scalar _tmp204 = _tmp200 - _tmp201 + _tmp202 - _tmp203;
  const Scalar _tmp205 = _tmp125 * _tmp204 + _tmp126 * _tmp204 + _tmp204 * _tmp72;
  const Scalar _tmp206 = _tmp111 * _tmp199;
  const Scalar _tmp207 = -_tmp198 + _tmp205 * _tmp79 + _tmp206;
  const Scalar _tmp208 = _tmp176 * _tmp41;
  const Scalar _tmp209 = _tmp178 * _tmp55;
  const Scalar _tmp210 = _tmp132 * _tmp205 + _tmp208 - _tmp209;
  const Scalar _tmp211 = _tmp129 * _tmp207 + _tmp134 * _tmp210;
  const Scalar _tmp212 = _tmp139 * _tmp211 - _tmp159 * _tmp211 + _tmp210 * _tmp95;
  const Scalar _tmp213 = _tmp142 * _tmp211 - _tmp161 * _tmp211 + _tmp207 * _tmp95;
  const Scalar _tmp214 = _tmp192 * _tmp51;
  const Scalar _tmp215 = _tmp186 * _tmp51;
  const Scalar _tmp216 = _tmp182 * _tmp29;
  const Scalar _tmp217 = _tmp180 * _tmp51;
  const Scalar _tmp218 = _tmp63 * source_inverse_range;
  const Scalar _tmp219 = _tmp123 * _tmp218;
  const Scalar _tmp220 = -_tmp215 + _tmp216 - _tmp217 + _tmp219;
  const Scalar _tmp221 = _tmp125 * _tmp220 + _tmp126 * _tmp220 + _tmp220 * _tmp72;
  const Scalar _tmp222 = _tmp111 * _tmp218;
  const Scalar _tmp223 = -_tmp214 + _tmp221 * _tmp79 + _tmp222;
  const Scalar _tmp224 = _tmp178 * _tmp51;
  const Scalar _tmp225 = _tmp176 * _tmp29;
  const Scalar _tmp226 = _tmp132 * _tmp221 - _tmp224 + _tmp225;
  const Scalar _tmp227 = _tmp129 * _tmp223 + _tmp134 * _tmp226;
  const Scalar _tmp228 = _tmp139 * _tmp227 - _tmp159 * _tmp227 + _tmp226 * _tmp95;
  const Scalar _tmp229 = _tmp142 * _tmp227 - _tmp161 * _tmp227 + _tmp223 * _tmp95;
  const Scalar _tmp230 = -_tmp52;
  const Scalar _tmp231 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp232 = -_tmp231;
  const Scalar _tmp233 = -_tmp0;
  const Scalar _tmp234 = -_tmp40;
  const Scalar _tmp235 = _tmp23 * (_tmp234 + _tmp39) + _tmp38 * (_tmp230 + _tmp54) +
                         _tmp46 * (_tmp2 + _tmp232 + _tmp233 + _tmp49);
  const Scalar _tmp236 = _tmp231 + _tmp233;
  const Scalar _tmp237 = -_tmp49;
  const Scalar _tmp238 = _tmp2 + _tmp237;
  const Scalar _tmp239 = _tmp38 * (_tmp236 + _tmp238) + _tmp57;
  const Scalar _tmp240 = -_tmp121 * _tmp235 - _tmp122 * _tmp235 + _tmp123 * _tmp239;
  const Scalar _tmp241 = _tmp125 * _tmp240 + _tmp126 * _tmp240 + _tmp240 * _tmp72;
  const Scalar _tmp242 = _tmp111 * _tmp239 - _tmp116 * _tmp235 + _tmp241 * _tmp79;
  const Scalar _tmp243 = -_tmp131 * _tmp235 + _tmp132 * _tmp241;
  const Scalar _tmp244 = _tmp129 * _tmp242 + _tmp134 * _tmp243;
  const Scalar _tmp245 = _tmp139 * _tmp244 - _tmp159 * _tmp244 + _tmp243 * _tmp95;
  const Scalar _tmp246 = _tmp142 * _tmp244 - _tmp161 * _tmp244 + _tmp242 * _tmp95;
  const Scalar _tmp247 = -_tmp2;
  const Scalar _tmp248 = _tmp247 + _tmp49;
  const Scalar _tmp249 = _tmp23 * (_tmp236 + _tmp248) + _tmp47;
  const Scalar _tmp250 = _tmp0 + _tmp232;
  const Scalar _tmp251 = -_tmp25;
  const Scalar _tmp252 =
      _tmp23 * (_tmp251 + _tmp28) + _tmp38 * (_tmp248 + _tmp250) + _tmp46 * (_tmp230 + _tmp53);
  const Scalar _tmp253 = _tmp119 * _tmp252 - _tmp121 * _tmp249 - _tmp122 * _tmp249;
  const Scalar _tmp254 = _tmp125 * _tmp253 + _tmp126 * _tmp253 + _tmp253 * _tmp72;
  const Scalar _tmp255 = _tmp114 * _tmp249;
  const Scalar _tmp256 = -_tmp115 * _tmp255 + _tmp254 * _tmp79;
  const Scalar _tmp257 = -_tmp130 * _tmp255 + _tmp132 * _tmp254 + _tmp252 * _tmp76;
  const Scalar _tmp258 = _tmp129 * _tmp256 + _tmp134 * _tmp257;
  const Scalar _tmp259 = _tmp139 * _tmp258 - _tmp159 * _tmp258 + _tmp257 * _tmp95;
  const Scalar _tmp260 = _tmp142 * _tmp258 - _tmp161 * _tmp258 + _tmp256 * _tmp95;
  const Scalar _tmp261 = _tmp46 * (_tmp0 + _tmp231 + _tmp237 + _tmp247) + _tmp66;
  const Scalar _tmp262 =
      _tmp23 * (_tmp238 + _tmp250) + _tmp38 * (_tmp251 + _tmp27) + _tmp46 * (_tmp234 + _tmp64);
  const Scalar _tmp263 = _tmp119 * _tmp261 + _tmp123 * _tmp262;
  const Scalar _tmp264 = _tmp125 * _tmp263 + _tmp126 * _tmp263 + _tmp263 * _tmp72;
  const Scalar _tmp265 = _tmp132 * _tmp264 + _tmp261 * _tmp76;
  const Scalar _tmp266 = _tmp111 * _tmp262 + _tmp264 * _tmp79;
  const Scalar _tmp267 = _tmp129 * _tmp266 + _tmp134 * _tmp265;
  const Scalar _tmp268 = _tmp139 * _tmp267 - _tmp159 * _tmp267 + _tmp265 * _tmp95;
  const Scalar _tmp269 = _tmp142 * _tmp267 - _tmp161 * _tmp267 + _tmp266 * _tmp95;
  const Scalar _tmp270 = _tmp181 - _tmp183 - _tmp185 + _tmp187;
  const Scalar _tmp271 = _tmp125 * _tmp270 + _tmp126 * _tmp270 + _tmp270 * _tmp72;
  const Scalar _tmp272 = -_tmp191 + _tmp193 + _tmp271 * _tmp79;
  const Scalar _tmp273 = _tmp132 * _tmp271 - _tmp177 + _tmp179;
  const Scalar _tmp274 = _tmp129 * _tmp272 + _tmp134 * _tmp273;
  const Scalar _tmp275 = _tmp139 * _tmp274 - _tmp159 * _tmp274 + _tmp273 * _tmp95;
  const Scalar _tmp276 = _tmp142 * _tmp274 - _tmp161 * _tmp274 + _tmp272 * _tmp95;
  const Scalar _tmp277 = -_tmp200 + _tmp201 - _tmp202 + _tmp203;
  const Scalar _tmp278 = _tmp125 * _tmp277 + _tmp126 * _tmp277 + _tmp277 * _tmp72;
  const Scalar _tmp279 = _tmp132 * _tmp278 - _tmp208 + _tmp209;
  const Scalar _tmp280 = _tmp198 - _tmp206 + _tmp278 * _tmp79;
  const Scalar _tmp281 = _tmp129 * _tmp280 + _tmp134 * _tmp279;
  const Scalar _tmp282 = _tmp281 * _tmp98;
  const Scalar _tmp283 = -_tmp136 * _tmp282 + _tmp138 * _tmp282 + _tmp279 * _tmp95;
  const Scalar _tmp284 = _tmp142 * _tmp281 - _tmp161 * _tmp281 + _tmp280 * _tmp95;
  const Scalar _tmp285 = _tmp215 - _tmp216 + _tmp217 - _tmp219;
  const Scalar _tmp286 = _tmp125 * _tmp285 + _tmp126 * _tmp285 + _tmp285 * _tmp72;
  const Scalar _tmp287 = _tmp132 * _tmp286 + _tmp224 - _tmp225;
  const Scalar _tmp288 = _tmp214 - _tmp222 + _tmp286 * _tmp79;
  const Scalar _tmp289 = _tmp129 * _tmp288 + _tmp134 * _tmp287;
  const Scalar _tmp290 = _tmp139 * _tmp289 - _tmp159 * _tmp289 + _tmp287 * _tmp95;
  const Scalar _tmp291 = _tmp142 * _tmp289 - _tmp161 * _tmp289 + _tmp288 * _tmp95;
  const Scalar _tmp292 = _tmp22 * _tmp65 + _tmp37 * _tmp63 + _tmp45 * _tmp62;
  const Scalar _tmp293 = _tmp22 * _tmp56 + _tmp37 * _tmp51 + _tmp45 * _tmp55;
  const Scalar _tmp294 = _tmp22 * _tmp4 + _tmp29 * _tmp37 + _tmp41 * _tmp45;
  const Scalar _tmp295 =
      _tmp119 * _tmp294 - _tmp121 * _tmp293 - _tmp122 * _tmp293 + _tmp123 * _tmp292;
  const Scalar _tmp296 = _tmp125 * _tmp295 + _tmp126 * _tmp295 + _tmp295 * _tmp72;
  const Scalar _tmp297 = _tmp111 * _tmp292 - _tmp116 * _tmp293 + _tmp296 * _tmp79;
  const Scalar _tmp298 = -_tmp131 * _tmp293 + _tmp132 * _tmp296 + _tmp294 * _tmp76;
  const Scalar _tmp299 = _tmp129 * _tmp297 + _tmp134 * _tmp298;
  const Scalar _tmp300 = _tmp139 * _tmp299 - _tmp159 * _tmp299 + _tmp298 * _tmp95;
  const Scalar _tmp301 = _tmp142 * _tmp299 - _tmp161 * _tmp299 + _tmp297 * _tmp95;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp96;
    _res(1, 0) = _tmp97;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp140;
    _jacobian(1, 0) = _tmp143;
    _jacobian(0, 1) = _tmp160;
    _jacobian(1, 1) = _tmp162;
    _jacobian(0, 2) = _tmp174;
    _jacobian(1, 2) = _tmp175;
    _jacobian(0, 3) = _tmp196;
    _jacobian(1, 3) = _tmp197;
    _jacobian(0, 4) = _tmp212;
    _jacobian(1, 4) = _tmp213;
    _jacobian(0, 5) = _tmp228;
    _jacobian(1, 5) = _tmp229;
    _jacobian(0, 6) = _tmp245;
    _jacobian(1, 6) = _tmp246;
    _jacobian(0, 7) = _tmp259;
    _jacobian(1, 7) = _tmp260;
    _jacobian(0, 8) = _tmp268;
    _jacobian(1, 8) = _tmp269;
    _jacobian(0, 9) = _tmp275;
    _jacobian(1, 9) = _tmp276;
    _jacobian(0, 10) = _tmp283;
    _jacobian(1, 10) = _tmp284;
    _jacobian(0, 11) = _tmp290;
    _jacobian(1, 11) = _tmp291;
    _jacobian(0, 12) = _tmp300;
    _jacobian(1, 12) = _tmp301;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp140, Scalar(2)) + std::pow(_tmp143, Scalar(2));
    _hessian(1, 0) = _tmp140 * _tmp160 + _tmp143 * _tmp162;
    _hessian(2, 0) = _tmp140 * _tmp174 + _tmp143 * _tmp175;
    _hessian(3, 0) = _tmp140 * _tmp196 + _tmp143 * _tmp197;
    _hessian(4, 0) = _tmp140 * _tmp212 + _tmp143 * _tmp213;
    _hessian(5, 0) = _tmp140 * _tmp228 + _tmp143 * _tmp229;
    _hessian(6, 0) = _tmp140 * _tmp245 + _tmp143 * _tmp246;
    _hessian(7, 0) = _tmp140 * _tmp259 + _tmp143 * _tmp260;
    _hessian(8, 0) = _tmp140 * _tmp268 + _tmp143 * _tmp269;
    _hessian(9, 0) = _tmp140 * _tmp275 + _tmp143 * _tmp276;
    _hessian(10, 0) = _tmp140 * _tmp283 + _tmp143 * _tmp284;
    _hessian(11, 0) = _tmp140 * _tmp290 + _tmp143 * _tmp291;
    _hessian(12, 0) = _tmp140 * _tmp300 + _tmp143 * _tmp301;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp160, Scalar(2)) + std::pow(_tmp162, Scalar(2));
    _hessian(2, 1) = _tmp160 * _tmp174 + _tmp162 * _tmp175;
    _hessian(3, 1) = _tmp160 * _tmp196 + _tmp162 * _tmp197;
    _hessian(4, 1) = _tmp160 * _tmp212 + _tmp162 * _tmp213;
    _hessian(5, 1) = _tmp160 * _tmp228 + _tmp162 * _tmp229;
    _hessian(6, 1) = _tmp160 * _tmp245 + _tmp162 * _tmp246;
    _hessian(7, 1) = _tmp160 * _tmp259 + _tmp162 * _tmp260;
    _hessian(8, 1) = _tmp160 * _tmp268 + _tmp162 * _tmp269;
    _hessian(9, 1) = _tmp160 * _tmp275 + _tmp162 * _tmp276;
    _hessian(10, 1) = _tmp160 * _tmp283 + _tmp162 * _tmp284;
    _hessian(11, 1) = _tmp160 * _tmp290 + _tmp162 * _tmp291;
    _hessian(12, 1) = _tmp160 * _tmp300 + _tmp162 * _tmp301;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp174, Scalar(2)) + std::pow(_tmp175, Scalar(2));
    _hessian(3, 2) = _tmp174 * _tmp196 + _tmp175 * _tmp197;
    _hessian(4, 2) = _tmp174 * _tmp212 + _tmp175 * _tmp213;
    _hessian(5, 2) = _tmp174 * _tmp228 + _tmp175 * _tmp229;
    _hessian(6, 2) = _tmp174 * _tmp245 + _tmp175 * _tmp246;
    _hessian(7, 2) = _tmp174 * _tmp259 + _tmp175 * _tmp260;
    _hessian(8, 2) = _tmp174 * _tmp268 + _tmp175 * _tmp269;
    _hessian(9, 2) = _tmp174 * _tmp275 + _tmp175 * _tmp276;
    _hessian(10, 2) = _tmp174 * _tmp283 + _tmp175 * _tmp284;
    _hessian(11, 2) = _tmp174 * _tmp290 + _tmp175 * _tmp291;
    _hessian(12, 2) = _tmp174 * _tmp300 + _tmp175 * _tmp301;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp196, Scalar(2)) + std::pow(_tmp197, Scalar(2));
    _hessian(4, 3) = _tmp196 * _tmp212 + _tmp197 * _tmp213;
    _hessian(5, 3) = _tmp196 * _tmp228 + _tmp197 * _tmp229;
    _hessian(6, 3) = _tmp196 * _tmp245 + _tmp197 * _tmp246;
    _hessian(7, 3) = _tmp196 * _tmp259 + _tmp197 * _tmp260;
    _hessian(8, 3) = _tmp196 * _tmp268 + _tmp197 * _tmp269;
    _hessian(9, 3) = _tmp196 * _tmp275 + _tmp197 * _tmp276;
    _hessian(10, 3) = _tmp196 * _tmp283 + _tmp197 * _tmp284;
    _hessian(11, 3) = _tmp196 * _tmp290 + _tmp197 * _tmp291;
    _hessian(12, 3) = _tmp196 * _tmp300 + _tmp197 * _tmp301;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp212, Scalar(2)) + std::pow(_tmp213, Scalar(2));
    _hessian(5, 4) = _tmp212 * _tmp228 + _tmp213 * _tmp229;
    _hessian(6, 4) = _tmp212 * _tmp245 + _tmp213 * _tmp246;
    _hessian(7, 4) = _tmp212 * _tmp259 + _tmp213 * _tmp260;
    _hessian(8, 4) = _tmp212 * _tmp268 + _tmp213 * _tmp269;
    _hessian(9, 4) = _tmp212 * _tmp275 + _tmp213 * _tmp276;
    _hessian(10, 4) = _tmp212 * _tmp283 + _tmp213 * _tmp284;
    _hessian(11, 4) = _tmp212 * _tmp290 + _tmp213 * _tmp291;
    _hessian(12, 4) = _tmp212 * _tmp300 + _tmp213 * _tmp301;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp228, Scalar(2)) + std::pow(_tmp229, Scalar(2));
    _hessian(6, 5) = _tmp228 * _tmp245 + _tmp229 * _tmp246;
    _hessian(7, 5) = _tmp228 * _tmp259 + _tmp229 * _tmp260;
    _hessian(8, 5) = _tmp228 * _tmp268 + _tmp229 * _tmp269;
    _hessian(9, 5) = _tmp228 * _tmp275 + _tmp229 * _tmp276;
    _hessian(10, 5) = _tmp228 * _tmp283 + _tmp229 * _tmp284;
    _hessian(11, 5) = _tmp228 * _tmp290 + _tmp229 * _tmp291;
    _hessian(12, 5) = _tmp228 * _tmp300 + _tmp229 * _tmp301;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp245, Scalar(2)) + std::pow(_tmp246, Scalar(2));
    _hessian(7, 6) = _tmp245 * _tmp259 + _tmp246 * _tmp260;
    _hessian(8, 6) = _tmp245 * _tmp268 + _tmp246 * _tmp269;
    _hessian(9, 6) = _tmp245 * _tmp275 + _tmp246 * _tmp276;
    _hessian(10, 6) = _tmp245 * _tmp283 + _tmp246 * _tmp284;
    _hessian(11, 6) = _tmp245 * _tmp290 + _tmp246 * _tmp291;
    _hessian(12, 6) = _tmp245 * _tmp300 + _tmp246 * _tmp301;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp259, Scalar(2)) + std::pow(_tmp260, Scalar(2));
    _hessian(8, 7) = _tmp259 * _tmp268 + _tmp260 * _tmp269;
    _hessian(9, 7) = _tmp259 * _tmp275 + _tmp260 * _tmp276;
    _hessian(10, 7) = _tmp259 * _tmp283 + _tmp260 * _tmp284;
    _hessian(11, 7) = _tmp259 * _tmp290 + _tmp260 * _tmp291;
    _hessian(12, 7) = _tmp259 * _tmp300 + _tmp260 * _tmp301;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp268, Scalar(2)) + std::pow(_tmp269, Scalar(2));
    _hessian(9, 8) = _tmp268 * _tmp275 + _tmp269 * _tmp276;
    _hessian(10, 8) = _tmp268 * _tmp283 + _tmp269 * _tmp284;
    _hessian(11, 8) = _tmp268 * _tmp290 + _tmp269 * _tmp291;
    _hessian(12, 8) = _tmp268 * _tmp300 + _tmp269 * _tmp301;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp275, Scalar(2)) + std::pow(_tmp276, Scalar(2));
    _hessian(10, 9) = _tmp275 * _tmp283 + _tmp276 * _tmp284;
    _hessian(11, 9) = _tmp275 * _tmp290 + _tmp276 * _tmp291;
    _hessian(12, 9) = _tmp275 * _tmp300 + _tmp276 * _tmp301;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp283, Scalar(2)) + std::pow(_tmp284, Scalar(2));
    _hessian(11, 10) = _tmp283 * _tmp290 + _tmp284 * _tmp291;
    _hessian(12, 10) = _tmp283 * _tmp300 + _tmp284 * _tmp301;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp290, Scalar(2)) + std::pow(_tmp291, Scalar(2));
    _hessian(12, 11) = _tmp290 * _tmp300 + _tmp291 * _tmp301;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp300, Scalar(2)) + std::pow(_tmp301, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp140 * _tmp96 + _tmp143 * _tmp97;
    _rhs(1, 0) = _tmp160 * _tmp96 + _tmp162 * _tmp97;
    _rhs(2, 0) = _tmp174 * _tmp96 + _tmp175 * _tmp97;
    _rhs(3, 0) = _tmp196 * _tmp96 + _tmp197 * _tmp97;
    _rhs(4, 0) = _tmp212 * _tmp96 + _tmp213 * _tmp97;
    _rhs(5, 0) = _tmp228 * _tmp96 + _tmp229 * _tmp97;
    _rhs(6, 0) = _tmp245 * _tmp96 + _tmp246 * _tmp97;
    _rhs(7, 0) = _tmp259 * _tmp96 + _tmp260 * _tmp97;
    _rhs(8, 0) = _tmp268 * _tmp96 + _tmp269 * _tmp97;
    _rhs(9, 0) = _tmp275 * _tmp96 + _tmp276 * _tmp97;
    _rhs(10, 0) = _tmp283 * _tmp96 + _tmp284 * _tmp97;
    _rhs(11, 0) = _tmp290 * _tmp96 + _tmp291 * _tmp97;
    _rhs(12, 0) = _tmp300 * _tmp96 + _tmp301 * _tmp97;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
